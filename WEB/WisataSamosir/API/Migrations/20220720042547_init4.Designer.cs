// <auto-generated />
using System;
using API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20220720042547_init4")]
    partial class init4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API.Model.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("MitraName")
                        .HasColumnName("mitra_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Role_id")
                        .HasColumnType("int");

                    b.Property<int>("Status_id")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Role_id");

                    b.HasIndex("Status_id");

                    b.ToTable("tb_account");
                });

            modelBuilder.Entity("API.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("enum('SocialCulture','NaturalTourism', 'Food', 'Hotel','Souvenir')");

                    b.HasKey("Id");

                    b.ToTable("tb_category");
                });

            modelBuilder.Entity("API.Model.Harbor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Harbor_Activity")
                        .HasColumnName("harbor_activity")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("Harbor_Name")
                        .HasColumnName("harbor_name")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Harbor_type")
                        .HasColumnName("harbor_type")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double");

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Route_id")
                        .HasColumnType("int");

                    b.Property<int?>("id_account")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("id_account");

                    b.ToTable("tb_harbor");
                });

            modelBuilder.Entity("API.Model.PortRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Harbor_end")
                        .HasColumnName("harbor_end")
                        .HasColumnType("int")
                        .HasMaxLength(25);

                    b.Property<int>("Harbor_start")
                        .HasColumnName("harbor_start")
                        .HasColumnType("int")
                        .HasMaxLength(25);

                    b.Property<string>("RouteName")
                        .HasColumnName("route_name")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("tb_port_route");
                });

            modelBuilder.Entity("API.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Role_Name")
                        .IsRequired()
                        .HasColumnName("role_name")
                        .HasColumnType("enum('SUPERADMIN','ADMIN')");

                    b.HasKey("Id");

                    b.ToTable("tb_role");
                });

            modelBuilder.Entity("API.Model.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("PortRoute_id")
                        .HasColumnType("int");

                    b.Property<string>("Session")
                        .HasColumnName("session")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<TimeSpan>("Time")
                        .HasColumnName("time")
                        .HasColumnType("time(6)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("PortRoute_id");

                    b.ToTable("tb_schedule");
                });

            modelBuilder.Entity("API.Model.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Status_Name")
                        .IsRequired()
                        .HasColumnName("status_name")
                        .HasColumnType("enum('ACTIVE','EXPIRED')");

                    b.HasKey("Id");

                    b.ToTable("tb_status");
                });

            modelBuilder.Entity("API.Model.TouristAttraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("Image")
                        .HasColumnName("image")
                        .HasColumnType("longblob");

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double");

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.ToTable("tb_destination");
                });

            modelBuilder.Entity("API.Model.Account", b =>
                {
                    b.HasOne("API.Model.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("Role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Status", "Status")
                        .WithMany("Accounts")
                        .HasForeignKey("Status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Model.Harbor", b =>
                {
                    b.HasOne("API.Model.Account", "Account")
                        .WithMany("Harbors")
                        .HasForeignKey("id_account");
                });

            modelBuilder.Entity("API.Model.Schedule", b =>
                {
                    b.HasOne("API.Model.PortRoute", "PortRoute")
                        .WithMany("Schedules")
                        .HasForeignKey("PortRoute_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Model.TouristAttraction", b =>
                {
                    b.HasOne("API.Model.Account", "Account")
                        .WithMany("TouristAttractions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Category", "Category")
                        .WithMany("TouristAttractions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
